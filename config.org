#+TITLE:My confiuration
* Table of Content                                                      :TOC:
- [[#introduction][Introduction]]
  - [[#private-configuration][Private configuration]]
  - [[#performance-12][Performance 1/2]]
  - [[#package-management][Package management]]
  - [[#performance-22][Performance 2/2]]
  - [[#security][Security]]
  - [[#miscellaneous][Miscellaneous]]
- [[#aesthetic-changes][Aesthetic changes]]
  - [[#theme][Theme]]
  - [[#bar][Bar]]
  - [[#dashboard][Dashboard]]
  - [[#miscellaneous-1][Miscellaneous]]
- [[#completion][Completion]]
  - [[#ivy][Ivy]]
  - [[#swiper][Swiper]]
  - [[#counsel][Counsel]]
  - [[#prescient][Prescient]]
- [[#programming][Programming]]
  - [[#common][Common]]
  - [[#languages][Languages]]
  - [[#git][Git]]
- [[#media][Media]]
  - [[#elfeed][Elfeed]]
  - [[#notmuch][Notmuch]]
- [[#keybindings][Keybindings]]
  - [[#evil][Evil]]
  - [[#avy][Avy]]
  - [[#general][General]]

* Introduction
** Private configuration
First of all, wa load the private config that you have to set yourself, in your
own private.el. You have to set up the user mail address and elfeed feeds.
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/private.el")
#+END_SRC
** Performance 1/2
We disable the garbage collector at launch time to improve performances.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
#+END_SRC
After startup, we set it back to a 16MB threshold.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
    (lambda ()
      (setq gc-cons-threshold 16777216
            gc-cons-percentage 0.1)))
#+END_SRC
** Package management
We add the [[https://melpa.org/#/][melpa]] package archive which contains most of emacs packages.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC
The [[https://github.com/jwiegley/use-package][use-package]] package provides an easier way to configure and install package,
we load it since it's already installed as a git submodule.
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (add-to-list 'load-path "~/.emacs.d/use-package")
    (require 'use-package))
#+END_SRC
Then we tell =use-package= to check if a package is installed and install it if
it's not unless we told it not to.
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
The [[https://github.com/waymondo/use-package-ensure-system-package][use-package-ensure-system-package]] provides a =use-package= extension to
check and install system dependencies.
#+BEGIN_SRC emacs-lisp
  (use-package use-package-ensure-system-package)
#+END_SRC
The [[https://github.com/rranelli/auto-package-update.el][auto-package-update]] package provides automatic updates with
=use-package=. We tell it to only update packages after 5 seconds in idle.
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :defer 5
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
** Performance 2/2
The [[https://gitlab.com/koral/gcmh][gcmh]] package provides more garbage collector related optimizations, but we
need straight to install it so we can't install it with other optimizations.
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :defer t
    :init
    (gcmh-mode 1))
#+END_SRC
** Security
First, make emacs verify all TLS connections.
#+BEGIN_SRC emacs-lisp
  (setq tls-checktrust t
        gnutls-verify-error t)
#+END_SRC
Then, we give emacs the location of certificates.
#+BEGIN_SRC emacs-lisp
  (let ((trustfile "/etc/ssl/certs/ca-certificates.crt"))
    (setq tls-program
        `(,(format  "gnutls-cli --x509cafile %s -p %%p %%h" trustfile)
          ,(format "openssl s_client -connect %%h:%%p -CAfile %s -no_ssl2 -ign_eof"
                   trustfile)))
    (setq gnutls-trustfiles (list trustfile)))
#+END_SRC
** Miscellaneous
Switch to utf-8 encoding.
#+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)
#+END_SRC
Use y/n prompts instead of yes/no ones.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Aesthetic changes
** Theme
Install doom themes, enable italic and bold fonts and enable the nord theme. And
enable org-mode's fontification.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-nord t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+END_SRC
** Bar
The [[https://gitlab.com/jessieh/mood-line][mood-line]] package provides a [[https://github.com/hlissner/emacs-doom-themes][doom-modeline]] inspired bar, based on the
original emacs bar. We also add time in the bar.
#+BEGIN_SRC emacs-lisp
  (use-package mood-line
    :config
    (mood-line-mode)
    (display-time-mode))
#+END_SRC
*** Patch
The '⚑' character, used for issues by the bar, doesn't work well with the font I
use. So we use the [[https://github.com/raxod502/el-patch][el-patch]] package which allows to patch the bar.
#+BEGIN_SRC emacs-lisp
  (use-package el-patch)

  (el-patch-feature mood-line)
  (with-eval-after-load 'mood-line
    (el-patch-defun mood-line--update-flycheck-segment (&optional status)
      "Update `mood-line--flycheck-text' against the reported flycheck STATUS."
      (setq mood-line--flycheck-text
          (pcase status
            ('finished (if flycheck-current-errors
                           (let-alist (flycheck-count-errors flycheck-current-errors)
                             (let ((sum (+ (or .error 0) (or .warning 0))))
                               (propertize (concat
                                            (el-patch-swap "⚑ Issues: " "Issues: ")
                                            (number-to-string sum)
                                            "  ")
                                           'face (if .error
                                                     'mood-line-status-error
                                                   'mood-line-status-warning))))
                         (propertize "✔ Good  " 'face 'mood-line-status-success)))
            ('running (propertize "Δ Checking  " 'face 'mood-line-status-info))
            ('errored (propertize "✖ Error  " 'face 'mood-line-status-error))
            ('interrupted (propertize "⏸ Paused  " 'face 'mood-line-status-neutral))
            ('no-checker "")))))
#+END_SRC
** Dashboard
We use the [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] package which displays a nice home page with recent
files, agenda items and projects.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-show-shortcuts nil)
    (dashboard-items '((recents . 20)
                       (agenda . 5)
                       (projects . 8)))
    :config
    (global-page-break-lines-mode)
    (dashboard-setup-startup-hook))
#+END_SRC
To get dashboard when using =emacsclient -c=, we need the following line:
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
** Miscellaneous
*** Font
I like the [[https://github.com/NerdyPepper/scientifica][scientifica]] font, you can use another font format, however I've had
problems with this font in other formats.
#+BEGIN_SRC emacs-lisp
  (set-frame-font
   "-HBnP-scientifica-normal-normal-normal-*-11-*-*-*-*-0-iso10646-1")
#+END_SRC
However, this won't work with =emacsclient -c= so we need this:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "-HBnP-scientifica-normal-normal-normal-*-11-*-*-*-*-0-iso10646-1"))
#+END_SRC
*** Redundant UI elements
We disable unuseful UI elements.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
*** Line numbers
Enable line numbers in programming modes and org-mode.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'org-mode-hook  'display-line-numbers-mode)
#+END_SRC
* Completion
** Ivy
The [[https://github.com/abo-abo/swiper][ivy]] package provides a completion engine. We set a higher minibuffer than
default.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    :custom
    (ivy-height 20))
#+END_SRC
** Swiper
The [[https://github.com/abo-abo/swiper][swiper]] package provides an isearch alternative using ivy.
#+BEGIN_SRC emacs-lisp
  (use-package swiper 
    :commands (swiper))
#+END_SRC
** Counsel
The [[https://github.com/abo-abo/swiper][counsel]] package provides alternative commands for emacs builtin ones which
uses ivy.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after (ivy)
    :defer t
    :config
    (counsel-mode 1)
    (setq ivy-initial-inputs-alist nil))
#+END_SRC
** Prescient
We use the [[https://github.com/raxod502/prescient.el][prescient]] completion backend. We activate the persist option which
allows history between different emacs sessions.
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :after (ivy company)
    :config (prescient-persist-mode 1))
#+END_SRC
We install the ivy backend of prescient.
#+BEGIN_SRC emacs-lisp
  (use-package ivy-prescient
    :after (ivy prescient)
    :config (ivy-prescient-mode 1))
#+END_SRC
* Programming
** Common
*** Projectile
We use the [[https://github.com/bbatsov/projectile][projectile]] package to get good project completion and tooling.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :commands (project-find-file)
    :custom
    (projectile-completion-system 'ivy))
#+END_SRC
*** Parentheses
We use electric pair mode to get the corresponding delimiters when we type
one. For instance '(' will also add a ')'.
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC
We use the [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] package to get matching parentheses and brackets
of same colour.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
*** Tabulation
Set up the tabulation width and the default style in c.
#+BEGIN_SRC emacs-lisp
  (setq tab-width 8
        electric-indent-inhibit t
        c-default-style "bsd"
        c-basic-offset tab-width)
#+END_SRC
Make backspace delete a full tab instead of a space at a time.
#+BEGIN_SRC emacs-lisp
  (setq backward-delete-char-untabify-method 'hungry)
#+END_SRC
Only use tabs in c mode, and use spaces in other programming languages.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook '(lambda () (setq indent-tabs-mode nil)))
  (add-hook 'tuareg-mode-hook     '(lambda () (setq indent-tabs-mode nil)))
  (add-hook 'org-mode-hook        '(lambda () (setq indent-tabs-mode nil)))
  (add-hook 'c-mode-hook          '(lambda () (setq indent-tabs-mode t)))
#+END_SRC
The [[https://github.com/jcsalomon/smarttabs][smart tabs]] package allows us to use tabs for code blocks and spaces to align
things like tables and arguments, so we enable it in c mode.
#+BEGIN_SRC emacs-lisp
  (use-package smart-tabs-mode
    :config
    (smart-tabs-insinuate 'c))
#+END_SRC
*** Flycheck
The [[https://github.com/flycheck/flycheck][flycheck]] package provides on the fly syntax cheking. We enable it in all
buffers. The hook makes flycheck stop complaining about package presentation
when checking a emacs-lisp block from org-mode. We also change the way error are
represented, replacing the wave by a straight underline.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :custom-face
    (flycheck-info    ((t (:underline "#A3BE8C"))))
    (flycheck-error   ((t (:underline "#BF616A"))))
    (flycheck-warning ((t (:underline "#EBCB8B"))))
    :init (global-flycheck-mode)
    :hook
    (org-src-mode . (lambda ()
        (setq-local flycheck-disabled-checkers
                    '(emacs-lisp-checkdoc)))))
#+END_SRC
Replace flycheck's default fringe with a bitmap arrow.
#+BEGIN_SRC emacs-lisp
  (define-fringe-bitmap 'flycheck-error-bmp 
    (vector #b10000000
            #b11000000
            #b11100000
            #b11110000
            #b11100000
            #b11000000
            #b10000000)
    nil nil 'center)
  (flycheck-redefine-standard-error-levels nil 'flycheck-error-bmp)
#+END_SRC
*** Company
The [[https://github.com/company-mode/company-mode][company]] package provides in buffer auto-completion. We tell it to start
completing from the first character and provide keybindings to move in
suggestions without moving from the home row. We activate it in programming
modes and in org-mode.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook
    ((prog-mode org-mode) . company-mode)
    :bind
    (:map company-active-map
    ("<tab>" . 'company-complete-selection)
    ("M-l"   . 'company-complete-common)
    ("M-j"   . 'company-select-next)
    ("M-k"   . 'company-select-previous))
    :custom
    (company-idle-delay 0.1)
    (company-minimum-prefix-length 1))
#+END_SRC
We use the prescient integration with company to get better sorted
auto-completion.
#+BEGIN_SRC emacs-lisp
  (use-package company-prescient
    :after (company prescient)
    :config (company-prescient-mode))
#+END_SRC
** Languages
*** C
**** Irony
The [[https://github.com/Sarcasm/irony-mode][irony-mode]] package provides auto-completion and syntax checking for C/C++
based on libclang. So it needs to be installed using =irony-install-server=. Of
course we only enable it in c mode.
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :hook
    (c-mode     . irony-mode)
    (irony-mode . irony-cdb-autosetup-compile-options))
#+END_SRC
To get syntax checking with irony we use the [[https://github.com/Sarcasm/flycheck-irony][flycheck-irony]] backend of flycheck
which we load after flycheck and irony and enable it when flycheck is enabled.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-irony
    :after (flycheck irony)
    :hook (flycheck-mode . flycheck-irony-setup))
#+END_SRC
To get auto-completion with irony we use the [[https://github.com/Sarcasm/company-irony][company-irony]] backend of company.
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :after (irony company)
    :config
    (add-to-list 'company-backends 'company-irony))
#+END_SRC
We also use the [[https://github.com/hotpxl/company-irony-c-headers][company-irony-c-headers]] of company to get completion of headers
file.
#+BEGIN_SRC emacs-lisp
  (use-package company-irony-c-headers
    :after (irony company)
    :config (add-to-list 'company-backends 'company-irony-c-headers))
#+END_SRC
We can get documentation from c files using the irony backend of eldoc.
#+BEGIN_SRC emacs-lisp
  (use-package irony-eldoc
    :after (irony)
    :hook (irony-mode . irony-eldoc))
#+END_SRC
**** CMake
The [[https://github.com/Lindydancer/cmake-font-lock/tree/9e0fcd1ee2cf316f661f2d652368b12f83a4ec9c][cmake-font-lock]] package provides advanced syntax highlighting for CMake
files.
#+BEGIN_SRC emacs-lisp
  (use-package cmake-font-lock
    :mode ("\\.cmake\\'||CMakeLists.txt"))
#+END_SRC
*** Ocaml
The [[https://github.com/ocaml/tuareg][tuareg]] package provides a REPL, syntax highlighting and a debugger. We tell
it to align patterns in pattern matching.
#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :custom
    (tuareg-match-patterns-aligned t)
    :mode "\\.ml\\'")
#+END_SRC
The [[https://github.com/ocaml/merlin][merlin]] package provides auto-completion, syntax-checking and type
annotations for ocaml. We use with tuareg and add it to the list of company
backends, so we load it after these packages.
#+BEGIN_SRC emacs-lisp
  (use-package merlin
    :after (tuareg company)
    :config
    (add-to-list 'company-backends 'merlin-company-backend)
    :hook
    ((caml-mode tuareg-mode) . merlin-mode))
#+END_SRC
We can get documentation from ocaml files using the merlin backend of eldoc.
#+BEGIN_SRC emacs-lisp
  (use-package merlin-eldoc
    :hook ((tuareg-mode caml-mode) . merlin-eldoc-setup)
    :custom
    (eldoc-echo-area-use-multiline-p t)
    (merlin-eldoc-max-lines 6))
#+END_SRC
By default merlin uses flymake, however we use flycheck, so we disable its
internal error reporting mechanism and replace it by a one which uses flycheck.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-ocaml
    :after (merlin flycheck)
    :config
    (setq merlin-error-after-save nil)
    (flycheck-ocaml-setup))
#+END_SRC
*** Org
Unable auto fill in org mode to make paragraphs of 80 lines automaticlly. We
only load the =emacs-lisp= backend of literate programming with org-mode.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :custom 
    (fill-column 80)
    :hook 
    (org-mode . auto-fill-mode)
    :config
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t))))
#+END_SRC
The [[https://github.com/snosov1/toc-org][toc-org]] auto generates table of contents on the first outline with a =:TOC:=
tag, so we turn it in org files and load it after org-mode.
#+BEGIN_SRC emacs-lisp
  (use-package toc-org 
    :after (org)
    :hook (org-mode . toc-org-enable))
#+END_SRC
** Git
*** Magit
The [[https://github.com/magit/magit][magit]] package provides a wrapper upon most of often used git commands.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-commit magit-push magit-status))
#+END_SRC
*** Git gutter 
The [[https://github.com/emacsorphanage/git-gutter][git-gutter]] and [[https://github.com/emacsorphanage/git-gutter-fringe][git-gutter-fringe]] packages provide a nice visual indicator in
the fringe to see which lines are modified, added or deleted and not commited
yet.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :hook ((prog-mode org-mode) . git-gutter-mode))

  (use-package git-gutter-fringe)
#+END_SRC
Provides a nice bitmap fringe for git-gutter.
#+BEGIN_SRC emacs-lisp
  (setq-default fringes-outside-margins t)
  (define-fringe-bitmap 'git-gutter-fr:added
    (vector #b11100000)
    nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified
    (vector #b11100000)
    nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted
    (vector #b10000000
            #b11000000
            #b11100000
            #b11110000)
    nil nil 'bottom)
#+END_SRC
* Media
** Elfeed
[[https://github.com/skeeto/elfeed][Elfeed]] is a feed reader supporting Atom and RSS feeds. Feeds are set in the
=private.el= file in a list named =elfeed-feeds=. We only load the package when
the =elfeed= command is called. We also tell that elfeed needs =curl=.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure-system-package (curl)
    :commands (elfeed))
#+END_SRC
** Notmuch
[[https://notmuchmail.org/][Notmuch]] is an email-client. We only load the package when the =notmuch= command
is called. You need to install the =notmuch= and =notmuch-emacs= packages with
your package manager. We tell =use-package= not to install =notmuch= since it's
already installed by the package manager. We also tell emacs which commands to
use to send email - the smtp server has to be configured in =private.el=. We
tell that =notmuch= needs =gnutls-cli= and =notmuch=.
#+BEGIN_SRC emacs-lisp
  (use-package notmuch 
    :ensure nil
    :commands (notmuch)
    :ensure-system-package 
    ((gnutls-cli . gnutls-bin)
      notmuch)
    :custom 
    (message-send-mail-function 'smtpmail-send-it)
    (mail-send-mail-function 'smtpmail-send-it)
    (message-auto-save-directory "~/.mail/draft")
    (message-kill-buffer-on-exit t)
    (message-directory "~/.mail"))
#+END_SRC
* Keybindings
** Evil
The [[https://github.com/emacs-evil/evil][Evil]] package provides emulation for the main features of Vim.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC
The [[https://github.com/emacs-evil/evil-collection][Evil Collection]] package provides Vim emulation for packages not covered by
Evil. We already modified company keybindings so we disable evil' one. 
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after (evil)
  :custom (evil-collection-company-use-tng nil)
  :config
  (evil-collection-init))
#+END_SRC
The [[https://github.com/emacs-evil/evil-magit][evil-magit]] package provides evil keybindings for magit.
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after (magit evil))
#+END_SRC
The [[https://github.com/apchamberlain/undo-tree.el][undo-tree]] package provides a more traditional undo system without loosing
information about past states of the buffer
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :after (evil)
    :config
    (global-undo-tree-mode))
#+END_SRC
** Avy
The [[https://github.com/abo-abo/avy][avy]] package provides a way to move in the buffer using a char-based decision
tree.
#+BEGIN_SRC emacs-lisp
  (use-package avy)
#+END_SRC
** General
The [[https://github.com/noctuid/general.el][general]] package provides an easy way to bind keys and integrates well with
evil.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :after (evil))
#+END_SRC
We define some keybindings for often used commands. They all start with the
prefix space, à la [[https://github.com/syl20bnr/spacemacs][spacemacs]]. We need to use the keymap =override= otherwise
evil would bind the space key.
#+BEGIN_SRC emacs-lisp
  (general-define-key
    :prefix "SPC"
    :states 'normal
    :keymaps 'override
    "SPC" 'projectile-find-file
    "sb"  'swiper
    "ff"  'find-file
    "bb"  'counsel-switch-buffer
    "fr"  'counsel-recentf
    "hj"  'counsel-flycheck
    "cr"  'comment-region
    "cc"  'comment-line
    "gc"  'magit-commit
    "gp"  'magit-push
    "gs"  'magit-status
    "al"  'avy-goto-line
    "ac"  'avy-goto-char-2
    "aw"  'avy-goto-word-1
    "at"  'avy-goto-char-timer
    "ml"  'notmuch
    "mk"  'compose-mail 
    "p"   'projectile-command-map)
#+END_SRC
We add some key bindings to edit source blocks in =org-mode=.
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :prefix "SPC"
   :states 'normal
   :keymaps '(org-mode-map)
   "cf" 'org-edit-special)

  (general-define-key
   :prefix "SPC"
   :states 'normal
   :keymaps '(org-src-mode-map)
   "cf" 'org-edit-src-exit)
#+END_SRC
We add some keys for full sized keyboards.
#+BEGIN_SRC emacs-lisp
  (general-define-key
    "<next>"  '(lambda ()
                (interactive)
                (next-line 40))
    "<prior>" '(lambda ()
                (interactive)
                (previous-line 40)))
#+END_SRC
