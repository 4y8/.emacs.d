#+TITLE:My configuration 
* Table of Content                                                      :TOC:
- [[#introduction][Introduction]]
  - [[#private-configuration][Private configuration]]
  - [[#performance][Performance]]
  - [[#package-management][Package management]]
  - [[#miscellaneous][Miscellaneous]]
- [[#aesthetic-changes][Aesthetic changes]]
  - [[#themes][Themes]]
  - [[#bar][Bar]]
  - [[#dashboard][Dashboard]]
  - [[#miscellaneous-1][Miscellaneous]]
- [[#completion][Completion]]
  - [[#ivy][Ivy]]
  - [[#counsel][Counsel]]
  - [[#prescient][Prescient]]
- [[#programming][Programming]]
  - [[#common][Common]]
  - [[#languages][Languages]]
  - [[#git][Git]]
- [[#keybindings][Keybindings]]
  - [[#evil][Evil]]
  - [[#general][General]]
- [[#media][Media]]
  - [[#elfeed][Elfeed]]
  - [[#mu4e][Mu4e]]

* Introduction
** Private configuration
First of all, wa load the private config that you have to set yourself, in your
own private.el. You have to set up the user mail address and elfeed feeds.
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/private.el")
#+END_SRC
** Performance
We disable the garbage collector at launch time to improve performances.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
#+END_SRC
After startup, we set it back to a 16MB threshold.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (setq gc-cons-threshold 16777216
          gc-cons-percentage 0.1)))
#+END_SRC
** Package management
We install the straight.el package manager [[https://github.com/raxod502/straight.el][straight.el]], package manager.
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
Then we install [[https://github.com/jwiegley/use-package][use-package]], to provide easier package configuration and
installation. We also tell =use-package= to install packages from =straight= by
default.
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC
** Miscellaneous
Switch to utf-8 encoding.
#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
#+END_SRC
Use y/n prompts instead of yes/no ones.
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Aesthetic changes
** Themes
Install doom themes, enable italic and bold fonts and enable the nord theme. And
enable org-mode's fontification.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    
        doom-themes-enable-italic t)
  (load-theme 'doom-nord t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+END_SRC
** Bar
We use the mood-line, which is a [[https://github.com/hlissner/emacs-doom-themes][doom-modeline]] inspired bar, based on the
original emacs bar and add the time in the bar.
#+BEGIN_SRC emacs-lisp
(use-package mood-line
  :config
  (mood-line-mode)
  (display-time-mode))
#+END_SRC
*** Patch
The '⚑' character, used for issues by the bar, doesn't work well with the font I
use. So we use the [[https://github.com/raxod502/el-patch][el-patch]] package which allows to patch the bar.
#+BEGIN_SRC emacs-lisp
(use-package el-patch)

(el-patch-feature mood-line)
(with-eval-after-load 'mood-line
  (el-patch-defun mood-line--update-flycheck-segment (&optional status)
    "Update `mood-line--flycheck-text' against the reported flycheck STATUS."
    (setq mood-line--flycheck-text
        (pcase status
          ('finished (if flycheck-current-errors
                         (let-alist (flycheck-count-errors flycheck-current-errors)
                           (let ((sum (+ (or .error 0) (or .warning 0))))
                             (propertize (concat
                                          (el-patch-swap "⚑ Issues: " "Issues: ")
                                          (number-to-string sum)
                                          "  ")
                                         'face (if .error
                                                   'mood-line-status-error
                                                 'mood-line-status-warning))))
                       (propertize "✔ Good  " 'face 'mood-line-status-success)))
          ('running (propertize "Δ Checking  " 'face 'mood-line-status-info))
          ('errored (propertize "✖ Error  " 'face 'mood-line-status-error))
          ('interrupted (propertize "⏸ Paused  " 'face 'mood-line-status-neutral))
          ('no-checker "")))))
#+END_SRC
** Dashboard
We use the [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] package which displays a nice home page with recent
files, agenda items and projects.
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :custom
  (dashboard-show-shortcuts nil)
  (dashboard-items '((recents . 20)
                     (agenda . 5)
		     (projects . 8)))
  :config
  (global-page-break-lines-mode)
  (dashboard-setup-startup-hook))
#+END_SRC
To get dashboard when using =emacsclient -c=, we need the following line:
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
** Miscellaneous
*** Font
I like the [[https://github.com/NerdyPepper/scientifica][scientifica]] font, you can use another font format, however I've had
problems with this font in other formats.
#+BEGIN_SRC emacs-lisp
(set-frame-font
 "-HBnP-scientifica-normal-normal-normal-*-11-*-*-*-*-0-iso10646-1")
#+END_SRC
However, this won't work with =emacsclient -c= so we need this:
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "-HBnP-scientifica-normal-normal-normal-*-11-*-*-*-*-0-iso10646-1"))
#+END_SRC
*** Redundant UI elements
We disable unuseful UI elements.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC
*** Line numbers
Enable line numbers in programming modes and org-mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'org-mode-hook  'display-line-numbers-mode)
#+END_SRC
* Completion
** Ivy
Install and enable the [[https://github.com/abo-abo/swiper][ivy]] completion engine, with a higher minibuffer than
default.
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  :custom
  (ivy-height 20))
#+END_SRC
** Counsel
The [[https://github.com/abo-abo/swiper][counsel]] package provides alternative commands for emacs builtin ones which
uses ivy.
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :config
  (counsel-mode 1)
  (setq ivy-initial-inputs-alist nil))
#+END_SRC
** Prescient
We use the [[https://github.com/raxod502/prescient.el][prescient]] completion backend and force ivy to use it. We activate the
persist option which allows history between different emacs sessions.
#+BEGIN_SRC emacs-lisp
(use-package prescient
  :config (prescient-persist-mode 1))

(use-package ivy-prescient
  :after (ivy counsel prescient)
  :config (ivy-prescient-mode 1))
#+END_SRC
* Programming
** Common
*** Projectile
We use the [[https://github.com/bbatsov/projectile][projectile]] package to get good project completion and tooling.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :commands project-find-file
  :custom
  (projectile-completion-system 'ivy))
#+END_SRC
*** Parentheses
We use electric pair mode to get the corresponding delimiters when we type
one. For instance '(' will also add a ')'.
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC
We use the [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] package to get matching parentheses and brackets
of same colour.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
*** Tabulation
Set up the tabulation width and the default style in c.
#+BEGIN_SRC emacs-lisp
(setq tab-width 8
      electric-indent-inhibit t
      c-default-style "bsd"
      c-basic-offset tab-width)
#+END_SRC
Make backspace delete a full tab instead of a space at a time.
#+BEGIN_SRC emacs-lisp
(setq backward-delete-char-untabify-method 'hungry)
#+END_SRC
Only use tabs in c mode, and use spaces in other programming languages.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook '(lambda () (setq indent-tabs-mode nil)))
(add-hook 'tuareg-mode-hook     '(lambda () (setq indent-tabs-mode nil)))
(add-hook 'c-mode-hook          '(lambda () (setq indent-tabs-mode t)))
#+END_SRC
The [[https://github.com/jcsalomon/smarttabs][smart tabs]] package allows us to use tabs for code blocks and spaces to align
things like tables and arguments, so we enable it in c mode.
#+BEGIN_SRC emacs-lisp
(use-package smart-tabs-mode
  :config
  (smart-tabs-insinuate 'c))
#+END_SRC
*** Flycheck
The [[https://github.com/flycheck/flycheck][flycheck]] package provides on the fly syntax cheking. We enable it in all
buffers. The hook makes flycheck stop complaining about package presentation
when checking a emacs-lisp block from org-mode.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode)
    :hook
    (org-src-mode . (lambda ()
		      (setq-local flycheck-disabled-checkers
				  '(emacs-lisp-checkdoc)))))
#+END_SRC
*** Company
The [[https://github.com/company-mode/company-mode][company]] package provides in buffer auto-completion. We tell it to start
completing from the first character and provide keybindings to move in
suggestions without moving from the home row. We activate it in programming
modes and in org-mode.
#+BEGIN_SRC emacs-lisp
(use-package company
  :hook 
  (prog-mode . company-mode)
  (org-mode  . company-mode)
  :bind
  ("M-j" . 'company-select-next)
  ("M-k" . 'company-select-previous)
  :custom
  (company-idle-delay 0.1)
  (company-minimum-prefix-length 1))
#+END_SRC
We use the prescient integration with company to get better sorted
auto-completion.
#+BEGIN_SRC emacs-lisp
(use-package company-prescient
  :after (company prescient)
  :config (company-prescient-mode))
#+END_SRC
** Languages
*** C
The [[https://github.com/Sarcasm/irony-mode][irony-mode]] package provides auto-completion and syntax checking for C/C++
based on libclang. So it needs to be installed using ~irony-install-server~. Of
course we only enable it in c mode.
#+BEGIN_SRC emacs-lisp
(use-package irony
  :hook
  (c-mode     . irony-mode)
  (irony-mode . irony-cdb-autosetup-compile-options))
#+END_SRC
To get syntax checking with irony we use the irony backend of flycheck which we
load after flycheck and irony and enable it when flycheck is enabled.
#+BEGIN_SRC emacs-lisp
(use-package flycheck-irony
  :after (flycheck irony)
  :hook (flycheck-mode . flycheck-irony-setup))
#+END_SRC
To get auto-completion with irony we use the irony backend of company and add a
backend to get completion of headers name.
#+BEGIN_SRC emacs-lisp
(use-package company-irony
  :after (irony company)
  :config
  (add-to-list 'company-backends 'company-irony))

(use-package company-irony-c-headers
  :after (irony company)
  :config (add-to-list 'company-backends 'company-irony-c-headers))
#+END_SRC
We can get documentation from c files using the irony backend of eldoc.
#+BEGIN_SRC emacs-lisp
  (use-package irony-eldoc
    :after (irony)
    :hook (irony-mode . irony-eldoc))
#+END_SRC
The [[https://github.com/ocaml/tuareg][tuareg]] package provides a REPL, syntax highlighting and a debugger. We tell
it to align patterns in pattern matching.
*** Ocaml
#+BEGIN_SRC emacs-lisp
(use-package tuareg
  :custom
  (tuareg-match-patterns-aligned t))
#+END_SRC
The [[https://github.com/ocaml/merlin][merlin]] package provides auto-completion, syntax-checking and type
annotations for ocaml. We use with tuareg and add it to the list of company
backends, so we load it after these packages.
#+BEGIN_SRC emacs-lisp
(use-package merlin
  :after (tuareg company)
  :config
  (add-to-list 'company-backends 'merlin-company-backend)
  :hook
  ((caml-mode tuareg-mode) . merlin-mode))
#+END_SRC
We can get documentation from ocaml files using the merlin backend of eldoc.
#+BEGIN_SRC emacs-lisp
(use-package merlin-eldoc
  :hook ((tuareg-mode caml-mode) . merlin-eldoc-setup)
  :custom
  (eldoc-echo-area-use-multiline-p t)
  (merlin-eldoc-max-lines 6))
#+END_SRC
By default merlin uses flymake, however we use flycheck, so we disable its
internal error reporting mechanism and replace it by a one which uses flycheck.
#+BEGIN_SRC emacs-lisp
(use-package flycheck-ocaml
  :after (merlin flycheck)
  :config
  (setq merlin-error-after-save nil)
  (flycheck-ocaml-setup))
#+END_SRC
*** Org
Unable auto fill in org mode to make paragraphs of 80 lines automaticlly.
#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (fill-column 80)
  :hook (org-mode . auto-fill-mode))
#+END_SRC
The [[https://github.com/snosov1/toc-org][toc-org]] auto generates table of contents on the first outline with a =:TOC:=
tag, so we turn it in org files and load it after org-mode.
#+BEGIN_SRC emacs-lisp
(use-package toc-org :after (org)
  :hook (org-mode . toc-org-enable))
#+END_SRC
** Git
*** Magit
The [[https://github.com/magit/magit][magit]] package provides a wrapper upon most of often used git commands.
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC
*** Git Gutter
The [[https://github.com/emacsorphanage/git-gutter][git-gutter]] and [[https://github.com/emacsorphanage/git-gutter-fringe][git-gutter-fringe]] packages provide a nice visual indicator in
the fringe to see which lines are modified, added or deleted and not commited
yet.  
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :hook ((prog-mode org-mode) . git-gutter-mode))
(use-package git-gutter-fringe)
#+END_SRC
This snippet is taken [[https://github.com/hlissner/doom-emacs][doom-emacs]] and provides a nice bitmap fringe for git-gutter.
#+BEGIN_SRC emacs-lisp
(setq-default fringes-outside-margins t)
(define-fringe-bitmap 'git-gutter-fr:added [224]
  nil nil '(center repeated))
(define-fringe-bitmap 'git-gutter-fr:modified [224]
  nil nil '(center repeated))
(define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240]
  nil nil 'bottom)
#+END_SRC
* Keybindings
** Evil
The [[https://github.com/emacs-evil/evil][Evil]] package provides emulation for the main features of Vim.
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+END_SRC
The [[https://github.com/emacs-evil/evil-collection][Evil Collection]] package provides Vim emulation for packages not covered by
Evil.
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after (evil)
  :config
  (evil-collection-init))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :after (evil)
  :config
  (global-undo-tree-mode))
#+END_SRC
** General
The [[https://github.com/noctuid/general.el][general]] package provides an easy way to bind keys and integrates well with
evil. 
#+BEGIN_SRC emacs-lisp 
(use-package general)
#+END_SRC
We define some keybindings for often used commands. They all start with the
prefix space, à la [[https://github.com/syl20bnr/spacemacs][spacemacs]]. We need to use the keymap =override= otherwise
evil would bind the space key.
#+BEGIN_SRC emacs-lisp
(general-define-key
  :prefix "SPC"
  :states 'normal
  :keymaps 'override
  "SPC" 'projectile-find-file
  "sb"  'swiper
  "ff"  'find-file
  "bb"  'counsel-switch-buffer
  "fr"  'counsel-recentf
  "ec"  'counsel-flycheck
  "cr"  'comment-region
  "cc"  'comment-line
  "gc"  'magit-commit
  "gp"  'magit-push
  "gs"  'magit-status
  "p"   'projectile-command-map)
#+END_SRC
We add some keys for full sized keyboards.
#+BEGIN_SRC emacs-lisp
(general-define-key 
  "<next>"  '(lambda ()
              (interactive)
	      (next-line 40))
  "<prior>" '(lambda ()
              (interactive)
	      (previous-line 40)))
#+END_SRC
* Media
** Elfeed
[[https://github.com/skeeto/elfeed][Elfeed]] is a feed reader supporting Atom and RSS feeds. Feeds are set in the
=private.el= file in a list named =elfeed-feeds=. We only load the package when
the =elfeed= command is called.
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :commands elfeed)
#+END_SRC
** Mu4e
[[https://github.com/djcb/mu][Mu4e]] is an email-client, you have to set the paths yourself since they are not
the same for all email servers. The =html2text= program has to be installed
since it provides better and faster html to text features, but you can remove
the line if you don't want it. We only load the package when the =mu4e= command
is called.
#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :commands mu4e
  :custom
  (mu4e-maildir           "~/.mail")
  (mu4e-sent-folder       "/INBOX.OUTBOX")
  (mu4e-drafts-folder     "/INBOX.DRAFT")
  (mu4e-trash-folder      "/INBOX.TRASH")
  (mu4e-refile-folder     "/INBOX")
  (smtpmail-smtp-user     user-mail-address)
  (mu4e-html2text-command "html2text"))
#+END_SRC
