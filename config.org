#+TITLE:My configuration 
* Introduction
** Private configuration
First of all, wa load the private config that you have to set yourself, in your
own private.el. You have to set up the user mail address and elfeed feeds.
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/private.el")
#+END_SRC
** Performance
We disable the garbage collector at launch time to improve performances.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
#+END_SRC
After startup, we set it back to a 16MB threshold.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (setq gc-cons-threshold 16777216
          gc-cons-percentage 0.1)))
#+END_SRC
** Package management
We install the straight.el package manager [[https://github.com/raxod502/straight.el][straight.el]], package manager.
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
Then we install [[https://github.com/jwiegley/use-package][use-package]], to provide easier package configuration and
installation. We also tell use-package to install packages from straight by
default.
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC
** Miscellaneous
Switch to utf-8 encoding.
#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
#+END_SRC
Use y/n prompts instead of yes/no ones.
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Aesthetic changes
** Themes
Install doom themes, enable italic and bold fonts and enable the
nord theme. And enable org-mode's fontification. 
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    
        doom-themes-enable-italic t)
  (load-theme 'doom-nord t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+END_SRC
** Bar
We use the mood-line, which is a [[https://github.com/hlissner/emacs-doom-themes][doom-modeline]] inspired bar, based on
the original emacs bar.
#+BEGIN_SRC emacs-lisp
(use-package mood-line
  :config
  (mood-line-mode))
#+END_SRC
*** Patch
The '⚑' character, used for issues by the bar, doesn't work well with
the font I use. So we use the [[https://github.com/raxod502/el-patch][el-patch]] package which allows to patch
the bar.
#+BEGIN_SRC emacs-lisp
(use-package el-patch)

(el-patch-feature mood-line)
(with-eval-after-load 'mood-line
  (el-patch-defun mood-line--update-flycheck-segment (&optional status)
    "Update `mood-line--flycheck-text' against the reported flycheck STATUS."
    (setq mood-line--flycheck-text
        (pcase status
          ('finished (if flycheck-current-errors
                         (let-alist (flycheck-count-errors flycheck-current-errors)
                           (let ((sum (+ (or .error 0) (or .warning 0))))
                             (propertize (concat
                                          (el-patch-swap "⚑ Issues: " "Issues: ")
                                          (number-to-string sum)
                                          "  ")
                                         'face (if .error
                                                   'mood-line-status-error
                                                 'mood-line-status-warning))))
                       (propertize "✔ Good  " 'face 'mood-line-status-success)))
          ('running (propertize "Δ Checking  " 'face 'mood-line-status-info))
          ('errored (propertize "✖ Error  " 'face 'mood-line-status-error))
          ('interrupted (propertize "⏸ Paused  " 'face 'mood-line-status-neutral))
          ('no-checker "")))))
#+END_SRC
** Dashboard
We use the [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] package which displays a nice home page
with recent files, agenda items and projects.
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :custom
  (dashboard-show-shortcuts nil)
  (dashboard-items '((recents . 20)
                     (agenda . 5)
		     (projects . 8)))
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp
(set-frame-font
 "-HBnP-scientifica-normal-normal-normal-*-11-*-*-*-*-0-iso10646-1")
#+END_SRC
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  :custom
  (ivy-height 20))

(use-package counsel
  :config
  (counsel-mode 1)
  (setq ivy-initial-inputs-alist nil))

(use-package projectile
  :commands project-find-file
  :custom
  (projectile-completion-system 'ivy))

(electric-pair-mode 1)

#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package smart-tabs-mode
  :config
  (smart-tabs-insinuate 'c))

(setq-default indent-tabs-mode t
              tab-width 8
              electric-indent-inhibit t)

(defvaralias 'c-basic-offset 'tab-width)
(setq backward-delete-char-untabify-method 'hungry)

;; Display a Pipe in tabs
(setq whitespace-display-mappings
  '((tab-mark 9 [124 9] [92 9])))

(add-hook 'c-mode-hook 'whitespace-mode)

;; Customize faces for whitespace mode
(custom-set-faces
 '(whitespace-indentation ((t (:background "#"))))
 '(whitespace-space-after-tab ((t nil))))

(custom-set-variables
 '(whitespace-line-column 100))

;; Set up code completion and checking, for C
(use-package irony
  :hook
  (c-mode     . irony-mode)
  (irony-mode . irony-cdb-autosetup-compile-options))

(use-package flycheck
  :init (global-flycheck-mode))

(use-package flycheck-irony
  :after flycheck
  :hook (flycheck-mode . flycheck-irony-setup))

(use-package company
  :hook (prog-mode . company-mode)
  :bind
  ("M-j" . 'company-select-next)
  ("M-k" . 'company-select-previous)
  :custom
  (company-idle-delay 0.1)
  (company-minimum-prefix-length 1)
  :config
  (add-to-list 'company-backends '(merlin-company-backend
                                  company-irony-c-headers
                                  company-irony)))

(use-package company-irony
  :after irony company)

(use-package company-irony-c-headers
  :after irony company)

; Set up code completion and checking, for Ocaml
(use-package tuareg
  :hook
  (caml-mode . merlin-mode)
  (tuareg-mode . merlin-mode)
  :custom
  (tuareg-match-patterns-aligned t))

;; Set up Merlin
(let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
 (when (and opam-share (file-directory-p opam-share))
  (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
  (autoload 'merlin-mode "merlin" nil t nil)))

;; Email, you have to set up the email address yourself in private.el
(use-package mu4e
  :commands mu4e
  :bind (:map mu4e-headers-mode-map
              ("j" . mu4e-headers-next)
              ("k" . mu4e-headers-prev))
  :custom
  (mu4e-maildir           "~/.mail")
  (mu4e-sent-folder       "/INBOX.OUTBOX")
  (mu4e-drafts-folder     "/INBOX.DRAFT")
  (mu4e-trash-folder      "/INBOX.TRASH")
  (mu4e-refile-folder     "/INBOX")
  (smtpmail-smtp-user     user-mail-address)
  (mu4e-html2text-command "html2text"))

(use-package magit)

(use-package git-gutter-fringe)

;; Taken from Doom emacs
(setq-default fringes-outside-margins t)
;; thin fringe bitmaps
(define-fringe-bitmap 'git-gutter-fr:added [224]
  nil nil '(center repeated))
(define-fringe-bitmap 'git-gutter-fr:modified [224]
  nil nil '(center repeated))
(define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240]
  nil nil 'bottom)

(add-hook 'prog-mode-hook 'git-gutter-mode)

;; Key bindings
(use-package evil-leader
  :after evil
  :config
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    "<SPC>" 'projectile-find-file
    "sb"    'swiper
    "ff"    'find-file
    "fr"    'counsel-recentf
    "ec"    'counsel-flycheck
    "cr"    'comment-region
    "cc"    'comment-line
    "gc"    'magit-commit
    "gp"    'magit-push
    "p"     'projectile-command-map)
  (global-evil-leader-mode))

(use-package undo-tree
  :after evil
  :config
  (global-undo-tree-mode))

(use-package evil
  :config
  (evil-mode 1))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(global-set-key (kbd "<next>") '(lambda ()
				   (interactive)
				   (next-line 25)))

(global-set-key (kbd "<prior>") '(lambda ()
				   (interactive)
				   (previous-line 25)))

;; Prescient completion
(use-package prescient
  :config (prescient-persist-mode 1))

(use-package ivy-prescient
  :after ivy counsel prescient
  :config (ivy-prescient-mode 1))

(use-package company-prescient
  :after company prescient
  :config (company-prescient-mode 1))

;; Elfeed RSS
(use-package elfeed)
#+END_SRC
